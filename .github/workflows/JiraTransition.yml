name: Jira Transition

on:
  pull_request:
    branches:
      master
    types: [opened, synchronize, reopened, edited, review_requested, review_request_removed]
  push:
    branches:
      master
  release:
    types: [published]
  pull_request_review:
    types: [dismissed, submitted]
    branches:
      master

jobs:
  Add_PR_Review_Info_to_Issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review'
    steps:

    # Checkout the repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Setup the Jira command line tool
    - name: Setup Jira CLI
      uses: atlassian/gajira-cli@master
      with:
        version:
          1.0.20

    # Login to Jira
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    # Add pull request reviewer info the the issue
    - name: Add info to issue
      run: |
        ./scripts/ci/ReviewerInfoComment.sh "${{ github.event.review.user.login }}" "${{ github.event.pull_request.title }}" "${{ github.event.repository.full_name }}" "${{ github.event.pull_request.number }}"
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}


  Transition_DEV-IN-PROGRESS_to_DEV-DONE:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'pull_request_review_comment'
    steps:

    # Checkout the repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Wait for checks to finish
    - name: Wait for status checks
      id: status-checks
      uses: WyriHaximus/github-action-wait-for-status@0.1.0
      with:
        ignoreActions: Transition_DEV-IN-PROGRESS_to_DEV-DONE,Run-tests
        checkInterval: 30
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Setup the Jira command line tool
    - name: Setup Jira CLI
      uses: atlassian/gajira-cli@master
      with:
        version:
          1.0.20

    # Login to Jira
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    # Filter pull request payloads down to just the pull request title
    - name: Get pull request title
      uses: Dovyski/payload-info-action@master
      id: pr-title
      with:
        filter_pull_request: '.pull_request.title'

    # Filter pull request payloads down to just the pull request title
    - name: Get pull request number
      uses: Dovyski/payload-info-action@master
      id: pr-number
      with:
        filter_pull_request: '.pull_request.number'

    # Filter pull request payloads down to just the pull request title
    - name: Get pull request repo url and owner
      uses: Dovyski/payload-info-action@master
      id: repo-url
      with:
        filter_pull_request: '.repository.full_name'

    # Check that all reviews have been approved.
    - name: Check for approved reviews
      id: reviews-approved-check
      run: |
        CHECK=$(./scripts/ci/checkReviewStatus.sh ${{ steps.pr-number.outputs.value }} ${{ steps.repo-url.outputs.value }})
        echo $CHECK
        echo "::set-output name=value::$CHECK"

    - name: Print useful info gathered by workflow
      run: |
        echo ""
        echo "Build/Test checks status: ${{ steps.status-checks.outputs.status }}"
        echo ""
        echo "Pull request number: ${{ steps.pr-number.outputs.value }}"
        echo ""
        echo "Repo URL: ${{ steps.repo-url.outputs.value }}"
        echo ""
        echo "Review status: ${{ steps.reviews-approved-check.outputs.value }}"
        echo ""

    # If the checks have passed, and there are no pending reviews or changes requested then transition the issue to dev done
    - name: Transistion issue(s) to "DEV DONE"
      if:  steps.status-checks.outputs.status == 'success' && steps.reviews-approved-check.outputs.value == 'All reviews approved (or no reviews requested).'
      run: |
        ./scripts/ci/Transition-DevInProgress-DevDone.sh ${{ steps.pr-title.outputs.value }} "${{ github.event.repository.full_name }}" "${{ github.event.pull_request.number }}"
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}


  Transition_DEV-DONE_to_QA-TO-DO:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:

    # Checkout the repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Setup the Jira command line tool
    - name: Setup Jira CLI
      uses: atlassian/gajira-cli@master
      with:
        version:
          1.0.20

    # Login to Jira
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    # Filter commit payloads down to just the messages
    - name: Filter payload
      uses: Dovyski/payload-info-action@master
      id: commit-message
      with:
        filter_push: '.commits[].message'

    # If an issue key is found in commit messages and on Jira perform transition
    - name: DEV DONE -> QA TO DO tasks
      run: |
        ./scripts/ci/Transition-DevDone-QAToDo.sh ${{ steps.commit-message.outputs.value }}
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  Transition_QA-Done_to_QA-TO-DO_preprod:
    runs-on: ubuntu-latest
    if: "github.event.release.prerelease"
    steps:

    # Checkout the repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Setup the Jira command line tool
    - name: Setup Jira CLI
      uses: atlassian/gajira-cli@master
      with:
        version:
          1.0.20

    # Login to Jira
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: Perform transition
      run: |
        ./scripts/ci/Transition-QADone-QAToDo-preprod.sh "${{ github.event.release.tag_name }}" "${{ github.event.repository.full_name }}"
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  Transition_QA-Done_to_Launched:
    runs-on: ubuntu-latest
    if: "!github.event.release.prerelease && github.event_name == 'release'"
    steps:

    # Checkout the repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Setup the Jira command line tool
    - name: Setup Jira CLI
      uses: atlassian/gajira-cli@master
      with:
        version:
          1.0.20

    # Login to Jira
    - name: Jira Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: Perform transition
      run: |
        ./scripts/ci/Transition-QADone-Launched.sh "${{ github.event.release.tag_name }}" "${{ github.event.repository.full_name }}"
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}